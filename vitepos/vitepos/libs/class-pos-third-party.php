<?php
/**
 * Its pos order model
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos\Libs
 */

namespace VitePos\Libs;

use Appsbd\V1\libs\API_Data_Response;
use Vitepos\Models\Database\Mapbd_Pos_Warehouse;
use VitePos\Modules\POS_Settings;

/**
 * Class POS_Payment
 *
 * @package VitePos\Libs
 */
class POS_Third_Party {

	/**
	 * Its property slf
	 *
	 * @var null
	 */
	private static $slf = null;

	/**
	 * POS_Third_Party constructor.
	 */
	protected function __construct() {

	}

	/**
	 * The get instance is generated by appsbd
	 *
	 * @return POS_Third_Party|null
	 */
	public static function &get_instance() {
		if ( is_null( self::$slf ) ) {
			self::$slf = new self();
		}

		return self::$slf;
	}

	/**
	 * POS_Payment constructor.
	 */
	public static function initialize() {
		$obj = self::get_instance();
		add_filter( 'vitepos/3rd-party/filter/addons', array( $obj, 'product_addons' ), 10, 2 );
		add_filter( 'vitepos/3rd-party/filter/get-addons', array( $obj, 'get_third_party_addons' ), 10, 2 );
		add_filter( 'vitepos/3rd-party/filter/outlets', array( $obj, 'outlet_list' ), 10, 1 );
		add_filter('vitepos/3rd-party/filter/product-barcode',array($obj,'get_barcode_of_product'),10,2);
	}

	/**
	 * The init is generated by appsbd
	 */
	public static function init() {
		$obj = self::get_instance();
	}

	/**
	 * The product addons is generated by appsbd
	 *
	 * @param mixed       $product_addons Its product_addons param.
	 *
	 * @param \WC_Product $wc_product Its wc_product param.
	 *
	 * @return mixed
	 */
	public function product_addons( $product_addons, $wc_product ) {
		$pos_product     = new \stdClass();
		$pos_product->id = $wc_product->get_id();
		$categories      = wc_get_object_terms( $wc_product->get_id(), 'product_cat' );
		foreach ( $categories as $category ) {
			$pos_product->category_ids[] = $category->term_id;

		}
		if ( POS_Settings::is_restaurant_mode() ) {
			/**
			 * Its for check is there any change before process
			 *
			 * @since 4.0
			 */
			$product_addons = apply_filters( 'vitepos/filter/product-details', array(), $pos_product, $wc_product );
			if ( appsbd_is_activated_plugin( 'restrofood/restrofood.php' ) ) {
				/**
				 * Its for check is there any change before process
				 *
				 * @since 4.0
				 */
				$get_addons = apply_filters( 'restrofood/3rd-party/filter/addons', $wc_product, array() );

			}
		}
		return $product_addons;
	}
	/**
	 * The product addons is generated by appsbd
	 *
	 * @param mixed       $product_addons Its product_addons param.
	 *
	 * @param \WC_Product $wc_product Its wc_product param.
	 *
	 * @return mixed
	 */
	public function get_third_party_addons( $product_addons, $wc_product ) {
		if ( POS_Settings::is_restaurant_mode() ) {
			/**
			 * Its for check is there any change before process
			 *
			 * @since 4.0
			 */
			$product_addons = array();
			if ( appsbd_is_activated_plugin( 'restrofood/restrofood.php' ) ) {
				/**
				 * Its for check is there any change before process
				 *
				 * @since 4.0
				 */
				$get_addons = apply_filters( 'restrofood/3rd-party/filter/addons', $wc_product, array() );
				if ( ! empty( $get_addons ) ) {
					foreach ( $get_addons as $addon ) {
						$this->set_product_third_party_addon( $addon, $product_addons, $wc_product );
					}
				}
			}
		}
		return $product_addons;
	}

	/**
	 * The set product addon by is generated by appsbd
	 *
	 * @param any   $addon Its addon param.
	 * @param array $product_addons its product addons param.
	 * @param null  $wc_product its wc product param.
	 *
	 * @return array|mixed
	 */
	public function set_product_third_party_addon( $addon, &$product_addons = array(), $wc_product = null ) {

			$sf               = new Pos_Product_Addon();
			$sf->id           = 'TP-' . wp_rand( 0, 10 );
			$sf->title        = $addon['group_title'];
			$sf->des          = '';
			$sf->addon_type   = 'checkbox' == $addon['list_type'] ? 'C' : 'R';
			$sf->help_text    = '';
			$sf->is_required  = $addon['group_required_number'] > 0 ? 'Y' : 'N';
			$sf->def_value    = '';
			$sf->opt_limit    = 'checkbox' == $addon['list_type'] ? $addon['group_required_number_max'] : '';
			$sf->addon_opts   = $this->add_option( $addon['group_feature'], $wc_product, $sf->id );
			$product_addons[] = $sf;
		return $sf;
	}
	/**
	 * The add option is generated by appsbd
	 *
	 * @param array       $addon_opts Its addon_opts param.
	 * @param \WC_Product $wc_product Its wc_product param.
	 * @param string      $id Its id param.
	 */
	public function add_option( $addon_opts, $wc_product, $id ) {

		foreach ( $addon_opts as $key => &$addon_opt ) {
			$option        = new \stdClass();
			$option->id    = $id . '-' . strtolower( $addon_opt['title'] );
			$option->label = $addon_opt['title'];
			$option->price = doubleval( $addon_opt['price'] );
			/**
			 * Its for check is there any change before process
			 *
			 * @since 2.0
			 */
			$option->tax = apply_filters( 'vitepos/filter/addon-tax', 0.0, $option->price, $wc_product );

			$option->is_selected = 'N';
			$addon_opt           = $option;
		}
		return $addon_opts;

	}

	/**
	 * The outlet list is generated by appsbd
	 *
	 * @param $outlets this is outlet param.
	 *
	 * @return API_Data_Response
	 */
	public function outlet_list( $outlets ) {
		$outlets = Mapbd_pos_warehouse::get_outlet_details( null, true );
		return $outlets;
	}

	/**
	 * The set barcode of product is generated by appsbd
	 *
	 * @param string $barcode It's barcode field.
	 * @param \WC_Product $product Its wc product.
	 *
	 * @return int|string
	 */
	public function get_barcode_of_product( $barcode,$product) {
		if ( ! ( $product instanceof \WC_Product ) ) {
			return '';
		}
		$barcode_type = POS_Settings::get_module_option( 'barcode_field' );
		if ( 'CUS' == $barcode_type ) {
			$barcode= $product->get_meta( '_vt_barcode' );
		} elseif ( 'SKU' == $barcode_type ) {
			$barcode= $product->get_sku();
		} else {
			$barcode= $product->get_id();
		}
		return $barcode;
	}
}
