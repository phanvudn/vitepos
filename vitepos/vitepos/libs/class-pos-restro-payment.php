<?php
/**
 * Its pos order model
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos\Libs
 */

namespace VitePos\Libs;

use Matrix\Exception;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer_Types;
use Vitepos\Models\Database\Mapbd_Pos_Custom_Field;
use Vitepos\Models\Database\Mapbd_Pos_Message;
use Vitepos\Models\Database\Mapbd_Pos_Role;
use Vitepos\Models\Database\Mapbd_Pos_Stock_Log;
use Vitepos\Models\Database\Mapbd_Pos_Warehouse;
use VitePos\Modules\POS_Settings;

/**
 * Class POS_Payment
 *
 * @package VitePos\Libs
 */
class POS_Restro_Payment extends POS_Payment {
	/**
	 * The deny item is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $item_id Its item_id param.
	 * @param mixed $reason_id Its reason_id param.
	 *
	 * @return bool
	 */
	public function deny_item( $order_id, $item_id, $reason_id ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
			$this->load_order( $order_id );

		$item = $this->order->get_item( $item_id );
		if ( $item->get_meta( '_vtp_item_status' ) == 'vt_it_kitchen' ) {
			$item->set_total( 0 );
			$item->set_subtotal( 0 );
			$item->update_meta_data( '_vtp_item_status', 'vt_it_denied' );
			$item->save();
			$msg_obj = new Mapbd_Pos_Message();
			$msg_obj->id( $reason_id );
			if ( $msg_obj->select( 'msg' ) ) {
				$msg_obj->msg = $item->get_name() . ' ' . $msg_obj->msg;
				POS_Order::add_resto_order_msg( $this->order->get_id(), $msg_obj->msg );
			}
			$this->calculate_totals( true );
			
			$this->calculate_totals( false );
			$this->order->save();
			return true;
		} else {
			POS_Settings::get_module_instance()->add_error( 'Item deny not possible' );
			return false;
		}

	}

	/**
	 * The remove item is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $item_id Its item_id param.
	 *
	 * @return bool
	 */
	public function remove_item( $order_id, $item_id ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
		$this->load_order( $order_id );
		$item = $this->order->get_item( $item_id );
		if ( ! empty( $item ) && in_array( $item->get_meta( '_vtp_item_status' ), array( 'vt_it_kitchen', 'vt_it_denied', 'vt_it_accept_req' ) ) ) {
			$msg = 'Item ' . $item->get_name() . ' has been removed from this order';
			$this->order->remove_item( $item_id );
			$this->order->add_order_note( $msg );
			POS_Order::add_resto_order_msg( $this->order->get_id(), $msg );
		} else {
			POS_Settings::get_module_instance()->add_error( 'Item remove is not possible' );
			return false;
		}
		$this->calculate_totals( true );
		$this->calculate_totals( false );
		$this->order->save();
		return true;
	}

	/**
	 * The cancel item request is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $item_id Its item_id param.
	 *
	 * @return bool
	 */
	public function cancel_item_request( $order_id, $item_id ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
		$this->load_order( $order_id );
		$item = $this->order->get_item( $item_id );
		if ( ! empty( $item ) && $item->get_meta( '_vtp_item_status' ) == 'vt_it_preparing' && $item->get_meta( '_vtp_item_can_cancel' ) == 'Y' ) {
			$msg = 'Item ' . $item->get_name() . ' has cancel request';
			$item->update_meta_data( '_vtp_item_status', 'vt_it_cancel_req' );
			$this->order->add_order_note( $msg );
			$item->save();
			POS_Order::add_resto_order_msg( $this->order->get_id(), $msg );
		} else {
			POS_Settings::get_module_instance()->add_error( 'Item cancel request is not possible' );
			return false;
		}
		$this->order->save();
		return true;
	}

	/**
	 * The accept cancel item is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $item_id Its item_id param.
	 *
	 * @return bool
	 */
	public function accept_cancel_item( $order_id, $item_id ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
		$this->load_order( $order_id );
		$item = $this->order->get_item( $item_id );
		if ( ! empty( $item ) && $item->get_meta( '_vtp_item_status' ) == 'vt_it_cancel_req' && $item->get_meta( '_vtp_item_can_cancel' ) == 'Y' ) {
			$msg = 'Item ' . $item->get_name() . ' cancel request accepted';
			$item->update_meta_data( '_vtp_item_status', 'vt_it_accept_req' );
			$item->set_total( 0 );
			$item->set_subtotal( 0 );
			$this->order->add_order_note( $msg );
			$item->save();
			POS_Order::add_resto_order_msg( $this->order->get_id(), $msg );
			$this->calculate_totals( true );
			
			$this->calculate_totals( false );
			$this->order->save();
			return true;
		} else {
			POS_Settings::get_module_instance()->add_error( 'Item cancel request is not possible' );
			return false;
		}

	}

	/**
	 * The deny cancel item is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $item_id Its item_id param.
	 *
	 * @return bool
	 */
	public function deny_cancel_item( $order_id, $item_id ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
		$this->load_order( $order_id );
		$item = $this->order->get_item( $item_id );
		if ( ! empty( $item ) && $item->get_meta( '_vtp_item_status' ) == 'vt_it_cancel_req' && $item->get_meta( '_vtp_item_can_cancel' ) == 'Y' ) {
			$msg = 'Item ' . $item->get_name() . ' cancel request denied';
			$item->update_meta_data( '_vtp_item_status', 'vt_it_preparing' );
			$item->update_meta_data( '_vtp_item_can_cancel', 'N' );
			$this->order->update_meta_data( '_vt_can_cancel', 'N' );
			$this->order->add_order_note( $msg );
			$item->save();
			POS_Order::add_resto_order_msg( $this->order->get_id(), $msg );
			$this->order->save();
			return true;
		} else {
			POS_Settings::get_module_instance()->add_error( 'Item cancel request is not possible' );
			return false;
		}

	}

	/**
	 * The add item is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $items Its items param.
	 * @param mixed $is_item_added Its is_item_added param.
	 *
	 * @return false|int
	 * @throws \WC_Data_Exception Its Data_Exception param.
	 */
	public function add_item( $order_id, $items, &$is_item_added ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
		$this->load_order( $order_id );
		$total_tax = $this->order->get_total_tax();
		if ( ! empty( $items ) ) {
			foreach ( $items as $item ) {
				$arguments = array(
					'total_tax' => $item['tax_amount'] * $item['quantity'],

				);
				try {
					$item_regular_price = 0.0;
					$item_sale_price    = 0.0;
					$item_price         = 0.0;
					if ( ! empty( $item['variation_id'] ) ) {
						if ( ! empty( $item['attributes'] ) && is_array( $item['attributes'] ) ) {
							$arguments ['variation'] = array();
							foreach ( $item['attributes'] as $attribute ) {
								$attribute                                       = (object) $attribute;
								$arguments ['variation'][ $attribute->opt_slug ] = $attribute->val_slug;
							}
						} else {
							$arguments ['variation'] = vitepos_get_product_variation_attributes( $item['variation_id'] );
						}

						$arguments ['name'] = wc_get_product( $item['product_id'] )->get_name();
						$product            = new \WC_Product_Variation( $item['variation_id'] );
						if ( ! empty( $item['addon_total'] ) ) {
							$item_regular_price = floatval( $product->get_regular_price( '' ) );
							$item_sale_price    = floatval( $product->get_sale_price( '' ) );
							$item_price         = floatval( $product->get_price( '' ) );
							$price              = $item_price + floatval( $item['addon_total'] );
							$product->set_price( $price );
							$product->set_regular_price( $item_regular_price );
						}
						$item_id = $this->order->add_product(
							$product,
							$item['quantity'],
							$arguments
						); 
					} else {
						$product = wc_get_product( $item['product_id'] );
						if ( ! empty( $item['addon_total'] ) ) {
							$item_regular_price = floatval( $product->get_regular_price( '' ) );
							$item_sale_price    = floatval( $product->get_sale_price( '' ) );
							$item_price         = floatval( $product->get_price( '' ) );
							$price              = $item_price + floatval( $item['addon_total'] );
							$product->set_price( $price );
							$product->set_regular_price( $item_regular_price );
						}
						$item_id = $this->order->add_product(
							$product,
							$item['quantity'],
							$arguments
						); 
					}
					$total_tax += ( $item['quantity'] * ( $item['tax_amount'] + $item['addon_total'] ) );
					$oitem      = new \WC_Order_Item_Product( $item_id );
					if ( ! empty( $item['attributes'] ) && is_array( $item['attributes'] ) ) {
						$oitem->add_meta_data( '_vtp_attributes', $item['attributes'] );
					}

					if ( ! empty( $item_regular_price ) ) {
						if ( ! empty( $item['addon_total'] ) ) {
							$oitem->add_meta_data(
								'_vtp_regular_price',
								$item_regular_price + floatval( $item['addon_total'] )
							);
						}
					} else {
						$oitem->add_meta_data( '_vtp_regular_price', '' );
					}

					if ( ! empty( $item['addon_total'] ) ) {
						$oitem->add_meta_data( '_vtp_addon_total', floatval( $item['addon_total'] ) );
					}
					$oitem->add_meta_data('_vtp_items_price',$item['price']); 
					if ( ! empty( $item['addon_tax'] ) ) {
						$oitem->add_meta_data( '_vtp_addon_tax', floatval( $item['addon_tax'] ) );
					}
					if ( ! empty( $item['addons'] ) ) {
						
						$oitem->add_meta_data( '_vtp_addons', $item['addons'] );
					}
					if ( $this->order->get_meta( '_vtp_is_item_wise' ) == 'Y' ) {
						$oitem->add_meta_data( '_vtp_item_status', 'vt_it_kitchen' );
						$oitem->add_meta_data( '_vtp_item_can_cancel', 'Y' );
					}
					/**
					 * It's for check is there any change before process
					 *
					 * @param \WC_Order_Item $oitem Is order Item with ref.
					 * @param array $item is Payload Item with ref.
					 * @param \WC_Order $order is wc order object with ref.
					 * @since 3.5
					 */
					do_action_ref_array('appsbd/vitepos/action/order/line-item',array(&$oitem,&$item,&$this->order));
					if ( $oitem->save() && ! $is_item_added ) {
						$is_item_added = true;
					}

				} catch ( Exception $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
				}
			}
		}

		$customer_id = $this->get_payload(
				'customer',
				POS_Settings::get_module_option( 'pos_customer', null )
			);
		if ( $this->order->get_customer_id() != $customer_id ) {
			$this->order->set_customer_id( $customer_id );
			$billing_address = $this->get_outlet_address();
			/**
			 * Its for check is there any change before process
			 *
			 * @since 2.0
			 */
			$billing_address = apply_filters(
				'vitepos/filter/billing-address',
				$billing_address,
				$this->order,
				$customer_id
			);
			$this->set_address( $billing_address, 'billing' );
		}
		
		if ( ! empty( $this->get_payload( 'note', '' ) && $this->order->get_meta( '_vtp_order_note' ) != $this->get_payload( 'note', '' ) ) ) {
			$this->order->update_meta_data( '_vtp_order_note', $this->get_payload( 'note', '' ) );
		}
		$this->calculate_totals( true );
		
		$this->set_order_tax( $total_tax );

		$this->calculate_totals( false );

		return $this->order->save();
	}

	/**
	 * The next status to update is generated by appsbd
	 *
	 * @param mixed $order_id Its order_id param.
	 * @param mixed $status_arr Its status_arr param.
	 *
	 * @return false|string
	 */
	public function next_status_to_update( $order_id, $status_arr ) {
			$this->is_restaurant = true;
			$this->is_checkout   = false;
			$this->is_offline    = false;

		if ( empty( $order_id ) ) {
			POS_Settings::get_module_instance()->add_error( 'Empty order id' );
			return false;
		}
			$this->load_order( $order_id );
			$items = $this->order->get_items();

			$item_status = array();
			$status      = '';
		foreach ( $items as $item ) {
			$item_status[] = $item->get_meta( '_vtp_item_status' );
		}
		if ( in_array( 'vt_it_kitchen', $item_status ) ) {
			if ( $this->order->get_status() != 'vt_in_kitchen' && $this->order->get_status() != 'vt_ready_to_srv' && $this->order->get_status() != 'vt_served' ) {
				$status = 'vt_preparing';
			}
		} elseif ( empty( $status ) && in_array( 'vt_it_preparing', $item_status ) ) {
			if ( $this->order->get_status() != 'vt_preparing' ) {
				$status = 'vt_preparing';
			}
		} elseif ( empty( $status ) && in_array( 'vt_it_ready', $item_status ) ) {
			if ( $this->order->get_status() != 'vt_ready_to_srv' ) {
				$status = 'vt_ready_to_srv';
			}
		} elseif ( empty( $status ) && in_array( 'vt_it_served', $item_status ) ) {
			if ( $this->order->get_status() != 'vt_ready_to_srv' ) {
				$status = 'vt_served';
			}
		} elseif ( empty( $status ) && in_array( 'vt_it_denied', $item_status ) ) {
			if ( $this->order->get_status() != 'vt_kitchen_deny' ) {
				$status = 'vt_kitchen_deny';
			}
		}
		return $status;
	}

}
