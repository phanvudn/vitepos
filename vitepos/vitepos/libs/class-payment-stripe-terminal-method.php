<?php
/**
 * Its payment method base.
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos\Libs
 */

namespace VitePos\Libs;


use VitePos\Api\V1\Pos_Order_Api;
use Vitepos\Models\Database\Mapbd_Pos_Counter;
use Vitepos\Models\Database\Mapbd_Pos_Warehouse;
use VitePos\Modules\POS_Settings;
use WpOrg\Requests\Exception;

/**
 * Class Payment_Stripe_Method
 *
 * @package VitePos\Libs
 */
class Payment_Stripe_Terminal_Method extends Payment_Stripe_Method {
	/**
	 * Its property secret_key
	 *
	 * @var string
	 */
	protected $secret_key = '';

	/**
	 * The initialize is generated by appsbd
	 *
	 * @return mixed|void
	 */
	public function initialize() {
		$this->set_admin_name( 'stripe_terminal' );
		$this->title = 'Stripe Terminal';
		$this->icon  = 'vps vps vps-cc-stripe';
		$this->id    = 'R';
		$this->comp  = 'basic';
		$this->set_next_handler( 'STP', 'StripeTerminal' );
		add_filter( 'vitepos/filter/header-links', array( $this, 'prefetch_script' ), 11 );
		add_filter( 'vitepos/filter/footer-scripts', array( $this, 'footer_script' ), 9 );
		add_action( 'vitepos/action/payment/custom-process/resend-terminal', array( $this, "resend_to_terminal" ) );
		add_action( 'vitepos/action/payment/custom-process/check-status', array( $this, "check_status" ) );
		$this->offline = false;
	}

	/**
	 * The load data is generated by appsbd
	 */
	public function load_data() {
		parent::load_data();

		
		
	}

	/**
	 * The is enable is generated by appsbd
	 *
	 * @return bool
	 */
	public function is_enable() {
		if ( $this->admin_data->is_enable == 'Y' || ! $this->admin_data->is_viewable() ) {
			$settings = get_option( 'vps_pm_T' );
			if ( empty( $settings->settings ) || empty( $settings->settings['pub_key'] ) || empty( $settings->settings['secret_key'] ) ) {
				return false;
			}

			return true;
		}

		return false;
	}
	public function get_stripe_settings(){
		return  get_option( 'vps_pm_T', [] );
	}
	/**
	 * The process payment is generated by appsbd
	 *
	 * @param mixed $params Its params param.
	 *
	 * @param $currency_code Its currency_code param.
	 * @param $order Its order param.
	 *
	 * @return mixed
	 */
	public function process_payment( $params, $currency_code, $order, $outlet_id, $counter_id ) {

		$params->resp->status = true;

		if ( $this->is_enable() ) {
			if ( empty( $this->settings[ $outlet_id . "_" . $counter_id ] ) ) {
				$params->resp->is_delete = true;
				POS_Settings::get_module_instance()->add_info( 'Stripe configuration error in server' );

				return $params;
			}
			$reader_id = $this->settings[ $outlet_id . "_" . $counter_id ];

			$stripe_settings = get_option( 'vps_pm_T', [] );
			if ( empty( $params->payment_item['client_secret'] ) ) {
				$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
				$stripe            = new \Stripe\StripeClient( $stripe_secret_key );

				try {

					$param = array(
						'amount'               => $params->payment_item['amount'] * 100,
						'currency'             => $currency_code,
						'capture_method'       => 'manual',
						'payment_method_types' => [ "card_present" ],
						'metadata'             => [
							'order_id' => $order->id,
							'from'     => 'Vitepos',
							'method'   => 'Stripe Terminal'
						]

					);
					if ( ! empty( $stripe_settings->settings['capture_method'] ) && 'P' == $stripe_settings->settings['capture_method'] ) {
						$param ['capture_method'] = 'automatic';
					}

					$payment_intent                        = $stripe->paymentIntents->create( $param );
					$params->payment_item['intend_id']     = $payment_intent->id;
					$params->payment_item['cm']            = ! empty( $param['capture_method'] ) ? $param['capture_method'] : 'automatic';
					$params->payment_item['client_secret'] = $payment_intent->client_secret;
					$params->resp->next                    = 'STP';
					
					$reader = $stripe->terminal->readers->processPaymentIntent( $reader_id,
						[ 'payment_intent' => $payment_intent->id ] );

					POS_Settings::get_module_instance()->add_info( 'Order requires payment process' );
					$params->payment_item['reader_id'] = $reader_id;
					$params->resp->payment_data        = array(
						'client_secret' => $params->payment_item['client_secret'],
						'reader_id'     => $reader_id,
						'amount'        => $params->payment_item['amount'],
						'currency'      => $currency_code,
						'method'        => $this->id,
					);

					return $params;
				} catch ( \Stripe\Exception\ApiErrorException $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					$params->resp->is_delete = true;
				} catch ( Error $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					$params->resp->is_delete = true;
				}
			} else {
				$params->resp->next         = 'STP';
				$params->resp->payment_data = array(
					'client_secret' => $params->payment_item['client_secret'],
					'reader_id'     => $reader_id,
					'amount'        => $params->payment_item['amount'],
					'currency'      => $currency_code,
					'method'        => $this->id,
				);

			}

		} else {
			$params->resp->is_delete = true;
			POS_Settings::get_module_instance()->add_info( 'Stripe configuration error in server' );
		}

		return $params;
	}
	/**
	 * The complete order is generated by appsbd
	 *
	 * @param POS_Payment $pos_payment Its pos_payment param.
	 * @param array       $payment_list Its payment_list param.
	 * @param bool        $payment_status_ok Its payment_status_ok param.
	 *
	 * @return mixed|void
	 */
	public function complete_order( &$pos_payment, &$payment_list, &$payment_status_ok ) {
		foreach ( $payment_list as &$pt ) {
			if ( $this->id == $pt['type'] ) {
				if ( ! empty( $pt['cm'] ) && 'manual' == $pt['cm']  ) {
					if ( empty( $pt['intend_id'] ) ) {
						$order_details = POS_Order::get_from_woo_order_details_by_id( $pos_payment->order->get_id() );
						$pos_payment->set_order_details( false, $order_details, 'RT' );
						$payment_status_ok = false;
						POS_Settings::get_module_instance()->add_error( "Intend is empty" );

						return;

					}
					$intend_id       = $pt['intend_id'];
					$stripe_settings = get_option( 'vps_pm_T', [] );
					$intend_status   = $this->get_intend_status( $intend_id );
					if ( 'requires_capture' == $intend_status ) {
						$pt['is_paid'] = 'Y';
						$pt['req_cap'] = 'Y';
						vitepos_wc_update_meta( $pos_payment->order, '_vt_stp_trans_id', $intend_id );
					}  else {
						if (  'requires_payment_method' == $intend_status) {
							POS_Settings::get_module_instance()->add_error( "Customer haven't tapped the card yet" );
						}
						$order_details = POS_Order::get_from_woo_order_details_by_id( $pos_payment->order->get_id() );
						$pos_payment->set_order_details( false, $order_details, 'RT' );
						$payment_status_ok = false;
					};
				} else {
					if(!empty($pt['intend_id'])) {
						$intend_id=$pt['intend_id'];
						$intend_status = $this->get_intend_status( $intend_id );

						if ( 'succeeded' == $intend_status ) {
							$pt['is_paid'] = 'Y';
							vitepos_wc_update_meta( $pos_payment->order, '_vt_stp_trans_id', $intend_id );
						} elseif ( 'requires_capture' == $intend_status ) {
							$pt['is_paid'] = 'Y';
							$pt['req_cap'] = 'Y';
							vitepos_wc_update_meta( $pos_payment->order, '_vt_stp_trans_id', $intend_id );
						} else {
							if ( 'requires_payment_method' == $intend_status ) {
								POS_Settings::get_module_instance()->add_error( "Customer haven't tapped the card yet" );
							}
							$order_details = POS_Order::get_from_woo_order_details_by_id( $pos_payment->order->get_id() );
							$pos_payment->set_order_details( false, $order_details, 'RT' );
							$payment_status_ok = false;
						}
					}else{
						POS_Settings::get_module_instance()->add_error( "Something went wrong, please cancel the order" );
						$order_details = POS_Order::get_from_woo_order_details_by_id( $pos_payment->order->get_id() );
						$pos_payment->set_order_details( false, $order_details, 'RT' );
						$payment_status_ok = false;
					}

				}
			}
		}

	}
	function set_stripe_api_error_msg($e,$stripe,$intend_id){
		try {
			$intend_data = $stripe->paymentIntents->retrieve( $intend_id );
			if ( $intend_data->status == "requires_payment_method" ) {
				POS_Settings::get_module_instance()->add_error( "Customer haven't tapped the card yet");
				return;
			}
			POS_Settings::get_module_instance()->add_error( $e->getMessage() );
		}catch ( \Stripe\Exception\ApiErrorException $e ) {
			POS_Settings::get_module_instance()->add_error( $e->getMessage() );

		}
	}
	/**
	 * The get payment data is generated by appsbd
	 *
	 * @param \WC_Order $order It is order param.
	 */
	public function get_payment_data( &$order ) {
		$payment_list = $order->get_meta( '_vtp_payment_list' );
		foreach ( $payment_list as &$payment_item ) {
			if ( $this->id == $payment_item['type'] ) {
				return $payment_item;
			}
		}
		return null;
	}
	/**
	 * The cancel order is generated by appsbd
	 *
	 * @param \WC_Order $order Its order param.
	 */
	public function cancel_order( $order ) {
		if ( $order instanceof \WC_Order ) {
			$payment_list = $order->get_meta( '_vtp_payment_list' );
			$is_updated   = false;
			foreach ( $payment_list as &$payment_item ) {
				if ( $this->id == $payment_item['type'] ) {
					if ( ! empty( $payment_item['intend_id'] ) && ! empty( $payment_item['reader_id'] ) ) {
						$stripe_settings = get_option( 'vps_pm_T', [] );

						if ( ! empty( $stripe_settings ) && ! empty( $stripe_settings->settings['secret_key'] ) ) {

							$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];


							$cancel_intend = $payment_item['intend_id'];
							$stripe        = new \Stripe\StripeClient( $stripe_secret_key );
							try {
								$stripe->paymentIntents->cancel( $cancel_intend );

							} catch ( \Stripe\Exception\ApiErrorException $e ) {

							} catch ( \Exception $e ) {

							}

							try {
								$reader = $stripe->terminal->readers->cancelAction($payment_item['reader_id']);

								$order->update_meta_data( '_vtp_payment_list' ,$payment_list);
								$order->save();
							} catch ( \Stripe\Exception\ApiErrorException $e ) {

							}catch (\Exception $e){

							}
						}
					}

					$is_updated = true;
					unset( $payment_item['intend_id'] );

				}
				foreach ( array( 'cm', 'client_secret', 'reader_id' ) as $key ) {
					if ( isset( $payment_item[ $key ] ) ) {
						$is_updated = true;
						unset( $payment_item[ $key ] );
					}
				}
			}


			if ( $is_updated ) {
				$order->update_meta_data( '_vtp_payment_list', $payment_list );
				$order->save();
			}
		}
	}




	/**
	 * The resend to terminal is generated by appsbd
	 *
	 * @param Pos_Order_Api $api It is api param.
	 */
	public function resend_to_terminal(&$api) {
		$order_id = $api->get_payload( "order_id" );
		if ( empty( $order_id ) ) {
			$api->response->set_response( false, "Order id is missing", $api->payload );
			return;
		}
		$order = new \WC_Order( $order_id );
		$payment_list = $order->get_meta( '_vtp_payment_list' );
		$is_found=false;
		foreach ( $payment_list as &$payment_item ) {
			if ( $this->id == $payment_item['type'] ) {
				$is_found=true;
				break;
			}
		}
		if($is_found) {
			if ( ! empty( $payment_item['intend_id'] ) && ! empty( $payment_item['reader_id'] ) ) {
				$currency_code = $order->get_currency();
				$param         = array(
					'amount'               => $payment_item['amount'] * 100,
					'currency'             => $currency_code,
					'capture_method'       => $payment_item['cm'],
					'payment_method_types' => [ "card_present" ],
					'metadata'             => [
						'order_id' => $order->get_id(),
						'from'     => 'Vitepos',
						'method'   => 'Stripe Terminal'
					]

				);

				$stripe_settings = get_option( 'vps_pm_T', [] );

				if ( ! empty( $stripe_settings ) && ! empty( $stripe_settings->settings['secret_key'] ) ) {

					$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];

					try {
						$cancel_intend = $payment_item['intend_id'];
						$stripe        = new \Stripe\StripeClient( $stripe_secret_key );
						try {
							$stripe->paymentIntents->cancel( $cancel_intend );
						} catch ( \Stripe\Exception\ApiErrorException $e ) {

						} catch ( \Exception $e ) {

						}
						try {
							$payment_intent                = $stripe->paymentIntents->create( $param );
							$payment_item['intend_id']     = $payment_intent->id;
							$payment_item['cm']            = ! empty( $param['capture_method'] ) ? $param['capture_method'] : 'automatic';
							$payment_item['client_secret'] = $payment_intent->client_secret;
							$reader                        = $stripe->terminal->readers->processPaymentIntent( $payment_item['reader_id'],
								[ 'payment_intent' => $payment_intent->id ] );

							$order->update_meta_data( '_vtp_payment_list', $payment_list );
							$order->save();
						} catch ( \Stripe\Exception\ApiErrorException $e ) {

						} catch ( \Exception $e ) {

						}
						$response_data = array(
							'client_secret' => $payment_item['client_secret'],
							'reader_id'     => $payment_item['reader_id'],
							'amount'        => $payment_item['amount'],
							'currency'      => $currency_code,
							'method'        => $this->id,
						);
						$api->response->set_response( true, '', $response_data );
						return;
					} catch ( \Exception $e ) {
						$api->response->set_response( false, $e->getMessage(), null );
					}

				}
			}
		}

		$api->response->set_response( false,'intend error');

	}
	public function check_status(&$api) {
		$order_id = $api->get_payload( "order_id" );
		if ( empty( $order_id ) ) {
			$api->response->set_response( false, "Order id is missing", $api->payload );
			return;
		}
		$order = new \WC_Order( $order_id );
		$payment_data=$this->get_payment_data($order);
		if(empty($payment_data['intend_id'])){
			$api->response->set_response( false, "Missing Intend", $payment_data);
			return;
		}
		$stripe_settings = get_option( 'vps_pm_T', [] );
		$resp_obj=new \stdClass();
		$resp_obj->need_resend=false;
		$resp_obj->need_cancel=false;
		$resp_obj->reader=null;
		if ( ! empty( $stripe_settings ) && ! empty( $stripe_settings->settings['secret_key'] ) ) {
			if ( ! empty( $payment_data['intend_id'] ) ) {
				$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
				try {
					$stripe      = new \Stripe\StripeClient( $stripe_secret_key );
					$intend_data = $stripe->paymentIntents->retrieve( $payment_data['intend_id'] );
					if ( ! empty( $intend_data->status ) && ('succeeded' == $intend_data->status || 'requires_capture' == $intend_data->status)) {
						$api->response->set_response( true, "Customer Tapped Required to complete", $resp_obj);
					}else{
						$reader=$stripe->terminal->readers->retrieve($payment_data['reader_id']);
						if(empty($reader->action->status)|| $reader->action->status !='in_progress'){
							POS_Settings::get_module_instance()->add_error( "May be canceled form terminal, need to resend data to the terminal" );
							$resp_obj->need_resend=true;
							$resp_obj->reader=$reader;
							$api->response->set_response( false,'' , $resp_obj);
						}else{
							$api->response->set_response( false,'', $resp_obj);
						}

					}
				} catch ( \Exception $e ) {
					$api->response->set_response( false, $e->getMessage(),null);
				}
			}
		}

	}

	/**
	 * The set admin settings is generated by appsbd
	 *
	 * @return mixed|void
	 */
	public function set_admin_settings() {
		$this->set_admin_title_desc(
			'Enable %{brand} Payment',
			'It will allow you to take payment using %{brand} Payment gateway, make sure you have added %{brand} api info in %{brand} settings tab.',
			array( 'brand' => 'Stripe Terminal' )
		);
		$stripe_settings_card = $this->add_admin_card( 'readers', 'Map With Readers' );
		$this->set_tab_title( 'Stripe Terminal Settings', 'vps vps-cc-stripe' );
		$stripe_settings      = get_option( 'vps_pm_T',[]);
		if(empty($stripe_settings->settings['secret_key'] ) || empty($stripe_settings->settings['pub_key'])){
			$stripe_settings_card->add_error('Stripe Info Missing');
			return;
		}
		$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
		try {
			$stripe = new \Stripe\StripeClient($stripe_secret_key );
			
			$readers = [];
			$terminal      = new \stdClass();
			$terminal->id='';
			$terminal->val='Select Reader';
			$readers[]=$terminal;

			foreach ( $stripe->terminal->readers->all() as $item ) {
				$terminal      = new \stdClass();
				$terminal->id=$item->id;
				$terminal->val=$item->label . " (" . $item->serial_number . ")";
				$readers[]=$terminal;
				
			}
			$outlets= Mapbd_Pos_Warehouse::fetch_all_key_value("id","name");
			$counters= Mapbd_Pos_Counter::fetch_all("",'outlet_id','ASC');

			
			
			
			foreach ( $counters as $counter ) {
				if(isset($outlets[$counter->outlet_id])) {
					$stripe_settings_card->add_settings_field(
						$outlets[$counter->outlet_id] . ' (' . $counter->name . ')',
						$counter->outlet_id . "_" . $counter->id,
						true,
						'W',
						$readers
					);
				}
			}
			
			

			
		}catch (\Exception $ex){
			$stripe_settings_card->add_error($ex->getMessage());
			return;
		}
	}

}
