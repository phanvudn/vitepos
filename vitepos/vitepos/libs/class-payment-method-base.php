<?php
/**
 * Its payment method base.
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos\Libs
 */

namespace VitePos\Libs;

use Appsbd\V1\libs\Ajax_Confirm_Response;

/**
 * Class payment_method_base
 *
 * @package VitePos\Libs
 */
abstract class  Payment_Method_Base {
	/**
	 * Its property title
	 *
	 * @var string
	 */
	public $title;
	/**
	 * Its property icon
	 *
	 * @var string
	 */
	public $icon;
	/**
	 * Its property id
	 *
	 * @var string
	 */
	public $id;
	/**
	 * Its property comp
	 *
	 * @var string
	 */
	public $comp = '';
	/**
	 * Its property offline
	 *
	 * @var bool
	 */
	public $offline = true;
	/**
	 * Its property split
	 *
	 * @var bool
	 */
	public $split = true;
	/**
	 * Its property fields
	 *
	 * @var array
	 */
	public $fields = array();
	/**
	 * Its property settings
	 *
	 * @var array
	 */
	public $settings = array();
	/**
	 * Its property next_step
	 *
	 * @var string
	 */
	public $next_step = '';
	/**
	 * Its property h_comp
	 *
	 * @var string
	 */
	public $h_comp = '';
	/**
	 * Its property admin_data
	 *
	 * @var Payment_Admin_Data|null
	 */
	protected $admin_data = null;

	/**
	 * Payment_method_base constructor.
	 */
	final public function __construct() {
		$this->admin_data = new Payment_Admin_Data();
		$this->initialize();
		$this->load_data();
		$this->after_loaded();
		add_action( "vitepos/action/payment-method/settings-update-{$this->id}", array( $this, 'update_admin_settings' ) );
		add_action( "vitepos/action/payment-method/update-status-{$this->id}", array( $this, 'update_admin_status' ) );
		add_action( "vitepos/action/payment-method/complete-order/{$this->id}", array( $this, 'complete_order' ), 10, 3 );
		add_action('vitepos/action/payment-method/cancel-order', array( $this, 'cancel_order' ), 10 );
		add_action('vitepos/action/payment/capture',array($this,'payment_capture'));
		add_filter( "vitepos/filter/payment/process/{$this->id}", array( $this, 'process_payment' ), 10, 5 );
		add_filter( 'vitepos/filter/payment-name', array( $this, 'payment_name_by_id' ), 99, 2 );
	}

	/**
	 * The after loaded is generated by appsbd
	 */
	public function after_loaded() {

	}
	/**
	 * The initialize is generated by appsbd
	 *
	 * @return mixed
	 */
	abstract public function initialize();
	/**
	 * The payment capture is generated by appsbd
	 *
	 * @param \WC_Order $order It is order param.
	 */
	public function payment_capture($order ) {

	}
	/**
	 * The set admin name is generated by appsbd
	 *
	 * @param mixed $name Its name param.
	 */
	public function set_admin_name( $name ) {
		$this->admin_data->set_name( $name );
	}

	/**
	 * The payment name by id is generated by appsbd
	 *
	 * @param mixed $title Its title param.
	 * @param mixed $id Its id param.
	 */
	public function payment_name_by_id( $title, $id ) {
		if ( $id == $this->id ) {
			$title = $this->title;
		}
		return $title;
	}
	/**
	 * The process payment is generated by appsbd
	 *
	 * @param mixed     $params Its params param.
	 *
	 * @param string    $currency_code Its currency_code param.
	 * @param \WC_Order $order Its order param.
	 *
	 * @return mixed
	 */
	public function process_payment( $params, $currency_code, $order ,$outlet_id,$counter_id) {
		return $params;
	}

	/**
	 * The get admin setting is generated by appsbd
	 *
	 * @param mixed $key Its key param.
	 * @param null  $default Its default param.
	 *
	 * @return mixed|null
	 */
	public function get_admin_setting( $key, $default = null ) {
		if ( isset( $this->admin_data->settings[ $key ] ) ) {
			return $this->admin_data->settings[ $key ];
		}
		return $default;
	}

	/**
	 * The complete order is generated by appsbd
	 *
	 * @param POS_Payment $pos_payment Its pos_payment param.
	 * @param array       $payment_list Its payment list param.
	 *
	 * @param boolean     $payment_status_ok Its payment_status_ok param.
	 *
	 * @return mixed
	 */
	public function complete_order( &$pos_payment, &$payment_list, &$payment_status_ok ) {

	}

	/**
	 * The cancel order is generated by appsbd
	 *
	 * @param \WC_Order $order Its order param.
	 */
	public function cancel_order( $order ) {

	}
	/**
	 * The load data is generated by appsbd
	 */
	public function load_data() {
		$settings = get_option( 'vps_pm_' . $this->id );
		if ( false === $settings ) {
			$settings = \VitePos\Modules\POS_Payment::get_payment_gw_settings( $this->admin_data->get_name() );
			if ( ! empty( $settings->is_enable ) && 'Y' == $settings->is_enable ) {
				$this->admin_data->is_enable = $settings->is_enable;
				$this->admin_data->settings  = $settings->settings;
				$this->update_option();
			}
		} else {
			if ( $settings instanceof \__PHP_Incomplete_Class ) {
				$check                       = (array) $settings;
				$this->admin_data->is_enable = $check['is_enable'];
				$this->admin_data->settings  = $check['settings'];
				$this->update_option();
			} else {
				$this->admin_data->is_enable = $settings->is_enable;
				$this->admin_data->settings  = $settings->settings;
			}
		}

	}

	/**
	 * The update option is generated by appsbd
	 *
	 * @return bool
	 */
	public function update_option() {
		$admin_store_data            = new \stdClass();
		$admin_store_data->is_enable = $this->admin_data->is_enable;
		$admin_store_data->settings  = $this->admin_data->settings;
		return update_option( 'vps_pm_' . $this->id, $admin_store_data ) || add_option( 'vps_pm_' . $this->id, $admin_store_data );
	}

	/**
	 * The update admin status is generated by appsbd
	 *
	 * @param mixed $status Its status param.
	 */
	public function update_admin_status( $status ) {
		$main_response               = new Ajax_Confirm_Response();
		$this->admin_data->is_enable = $status;
		if ( $this->update_option() ) {
			$main_response->add_info( 'Successfully updated' );
			$main_response->display_with_response( true, $this->admin_data );
		} else {
			$main_response->add_error( 'Update failed' );
			$main_response->display_with_response( false, $this->admin_data );
		}
		$main_response->add_error( 'Update failed unknown error' );
		$main_response->display_with_response( false, $this->admin_data );
	}

	/**
	 * The update admin settings is generated by appsbd
	 *
	 * @param mixed $settings Its the settings.
	 */
	public function update_admin_settings( $settings ) {
		$main_response = new Ajax_Confirm_Response();
		if ( $this->is_valid_admin_settings( $settings, $main_response ) ) {
			if ( $this->admin_data->settings !== $settings ) {
				$this->admin_data->settings = $settings;
				if ( $this->update_option() ) {
					$main_response->add_info( 'Successfully updated' );
					$methods=\VitePos\Modules\POS_Payment::get_payment_methods_admin_settings();
					$main_response->display_with_response( true, $methods );
				} else {
					$main_response->add_error( 'Update failed' );
					$methods=\VitePos\Modules\POS_Payment::get_payment_methods_admin_settings();
					$main_response->display_with_response( false,$methods );
				}
			} else {
				$main_response->add_warning( 'No change to update' );
				$methods=\VitePos\Modules\POS_Payment::get_payment_methods_admin_settings();
				$main_response->display_with_response( false, $methods );
			}
		} else {
			$methods=\VitePos\Modules\POS_Payment::get_payment_methods_admin_settings();
			$main_response->display_with_response( false, $methods );
		}
	}



	/**
	 * The is valid admin settings is generated by appsbd
	 *
	 * @param mixed                 $settings Its settings param.
	 * @param Ajax_Confirm_Response $main_response Its main_response param.
	 *
	 * @return bool
	 */
	public function is_valid_admin_settings( $settings, &$main_response ) {
		return true;
	}

	/**
	 * The get admin data is generated by appsbd
	 *
	 * @return Payment_Admin_Data|null
	 */
	public function get_admin_data() {
		$this->set_admin_settings();
		return $this->admin_data;
	}

	/**
	 * The is gateway is generated by appsbd
	 *
	 * @param mixed $name Its name param.
	 *
	 * @return bool
	 */
	public function is_gateway( $name ) {
		return $name == $this->admin_data->get_name();
	}

	/**
	 * The set admin title desc is generated by appsbd
	 *
	 * @param mixed $title Its title param.
	 * @param mixed $desc Its desc param.
	 * @param array $params Its params param.
	 */
	public function set_admin_title_desc( $title, $desc, $params = array() ) {
		$this->admin_data->set_title( $title );
		$this->admin_data->set_desc( $desc );
		$this->admin_data->set_params( $params );
	}

	/**
	 * The set admin viewable is generated by appsbd
	 *
	 * @param mixed $status Its status param.
	 */
	public function set_admin_viewable( $status ) {
		$this->admin_data->set_viewable( $status );
	}

	/**
	 * The is admin viewable is generated by appsbd
	 *
	 * @return bool
	 */
	public function is_admin_viewable() {
		try {

			return $this->admin_data->is_viewable();
		} catch ( \Exception $e ) {
			return true;
		}
	}
	/**
	 * The is admin viewable is generated by appsbd
	 *
	 * @return bool
	 */
	public function is_enable() {
		return 'Y' == $this->admin_data->is_enable || ! $this->admin_data->is_viewable();
	}
	/**
	 * The set admin settings is generated by appsbd
	 *
	 * @return mixed
	 */
	abstract public function set_admin_settings();

	/**
	 * The add field is generated by appsbd
	 *
	 * @param mixed $title Its title param.
	 * @param mixed $name Its name param.
	 * @param false $is_required Its is_required param.
	 * @param string $type Its type param.
	 * @param string $is_show Its show in receipt or not.
	 */
	public function add_field( $title, $name, $is_required = false, $type = 'T', $is_show='N') {
		$obj              = new \stdClass();
		$obj->title       = $title;
		$obj->name        = $name;
		$obj->is_required = $is_required;
		$obj->is_show     = $is_show;
		$obj->type        = $type;
		$this->fields[]   = $obj;
	}

	/**
	 * The add admin field is generated by appsbd
	 *
	 * @param mixed  $title Its title param.
	 * @param mixed  $name Its name param.
	 * @param false  $is_required Its is_required param.
	 * @param string $type Its type param.
	 */
	public function add_admin_field( $title, $name, $is_required = false, $type = 'T' ) {
		$this->admin_data->add_settings_field( $title, $name, $is_required, $type );
	}

	/**
	 * The addAdminTab is generated by appsbd
	 *
	 * @param mixed $name Its name param.
	 * @param mixed $title Its title param.
	 *
	 * @return Payment_Admin_Card
	 */
	public function add_admin_card( $name, $title ) {
		return $this->admin_data->add_card( $name, $title );
	}

	/**
	 * The addAdminTab is generated by appsbd
	 *
	 * @param mixed  $title Its title param.
	 *
	 * @param string $icon Its font icon class.
	 *
	 * @return Payment_Admin_Card
	 */
	public function set_tab_title( $title, $icon = '' ) {
		return $this->admin_data->set_setting_tab_title( $title, $icon );
	}

	/**
	 * The get admin data object is generated by appsbd
	 *
	 * @return Payment_Admin_Data|null
	 */
	public function &get_admin_data_object() {
		return $this->admin_data;
	}
	/**
	 * The set settings is generated by appsbd
	 *
	 * @param array $settings Its settings param.
	 */
	public function set_settings( $settings = array() ) {
		$this->settings = (array) $settings;
	}

	/**
	 * The set next handler is generated by appsbd
	 *
	 * @param mixed $next_step Its next_step param.
	 * @param mixed $handler_component Its handler_component param.
	 */
	public function set_next_handler( $next_step, $handler_component ) {
		$this->next_step = $next_step;
		$this->h_comp    = $handler_component;
	}

	/**
	 * The set admin data is generated by appsbd
	 *
	 * @param mixed $next_step Its next_step param.
	 * @param mixed $handler_component Its handler_component param.
	 */
	public function set_admin_data( $next_step, $handler_component ) {

	}
}
