<?php
/**
 * Its for Pos Warehouse module
 *
 * @package VitePos\Modules
 */

namespace VitePos\Modules;

use Appsbd\V1\Core\BaseModule;
use Appsbd\V1\libs\Ajax_Confirm_Response;
use Appsbd\V1\libs\Ajax_Data_Response;
use Appsbd\V1\libs\Ajax_Response;
use Appsbd\V1\libs\AppInput;
use VitePos\Core\Vitepos_Module;
use Vitepos\Models\Database\Mapbd_Pos_Custom_Field;

/**
 * Class Apbd_pos_warehouse
 */
class POS_Custom_Field extends Vitepos_Module {
	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {

	}



	/**
	 * The OptionForm is generated by appsbd
	 */
	public function option_form() {
		$this->set_title( 'Custom Field List' );
		$this->set_subtitle( '' );
		$this->display();
	}

	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		if ( $this->check_user_access() ) {
			$this->add_ajax_action( 'add', array( $this, 'add' ) );
			$this->add_ajax_action( 'edit', array( $this, 'edit' ) );
			$this->add_ajax_action( 'delete', array( $this, 'delete' ) );
			$this->add_ajax_action( 'details', array( $this, 'details' ) );
			$this->add_ajax_action( 'change-status', array( $this, 'status_change' ) );
			$this->add_ajax_action( 'change-order', array( $this, 'change_order' ) );
			$this->add_ajax_action( 'customer-fields', array( $this, 'customer_fields' ) );
			$this->add_ajax_action( 'change-custom-required', array( $this, 'change_custom_required' ) );
			$this->add_ajax_action( 'change-visibility', array( $this, 'change_visibility' ) );
		}
	}

	/**
	 * The get menu title is generated by appsbd
	 *
	 * @return mixed Its mixed.
	 */
	public function get_menu_title() {
		return $this->__( 'Custom Field List' );
	}
	/**
	 * The get menu sub title is generated by appsbd
	 *
	 * @return mixed Its mixed.
	 */
	public function get_menu_sub_title() {
		return $this->__( 'Custom Field List' );
	}

	/**
	 * The get menu icon is generated by appsbd
	 *
	 * @return string Its string.
	 */
	public function get_menu_icon() {
		return 'aps aps-shop';
	}

	/**
	 * The add is generated by appsbd
	 */
	public function add() {
		$response = new Ajax_Confirm_Response();
		if ( APPSBD_IS_POST_BACK ) {
			$nobject = new Mapbd_Pos_Custom_Field();
			if ( $nobject->set_from_post_data( true ) ) {
				if ( $nobject->is_set_prperty( 'options' ) ) {
					$nobject->options( serialize( $nobject->options ) );
				}

				if ( $nobject->save() ) {
					$this->add_info( 'Successfully added' );
					$response->display_with_response( true );
					return;
				}
			} else {
				$this->add_error( 'Invalid request' );
				$response->display_with_response( false );
				return;
			}
		}
	}

	/**
	 * The edit outlet is generated by appsbd
	 */
	public function edit() {
		$response = new Ajax_Confirm_Response();
		$id       = AppInput::post_value( 'id' );
		if ( empty( $id ) ) {
			$this->add_error( 'Invalid request' );
			$response->display_with_response( false );
			return;
		}
		if ( APPSBD_IS_POST_BACK ) {
			$uobject = new Mapbd_Pos_Custom_Field();
			if ( $uobject->set_from_post_data( false ) ) {
				$propes = 'label,type,is_half_field,is_required,status,help_text,is_calculable,show_where,options,operator,position,param';
				if ( $uobject->is_set_prperty( 'options' ) ) {
					$uobject->options( serialize( $uobject->options ) );
				}
				if ( $uobject->unset_all_excepts( $propes ) ) {
					$uobject->set_where_update( 'id', $id );
					if ( $uobject->Update() ) {
						$this->add_info( 'Successfully updated' );
						$response->display_with_response( true );
						return;
					} else {
						$this->add_error( 'Update Failed' );
						$response->display_with_response( false );
						return;
					}
				} else {
					$this->add_error( 'This Property Should not be update' );
					$response->display_with_response( false );
					return;
				}
			} else {
				$this->add_error( 'Invalid request' );
				$response->display_with_response( false );
				return;
			}
		} else {
			$this->add_error( 'Invalid request' );
			$response->display_with_response( false );
			return;
		}
	}


	/**
	 * The view warehouse details is generated by appsbd
	 */
	public function details() {
		$response = new Ajax_Confirm_Response();
		$id       = AppInput::post_value( 'id' );
		if ( empty( $id ) ) {
			$this->add_error( 'Invalid request' );
			$response->display_with_response( false );
			return;
		}
		$propes  = 'id,label,type,is_half_field,is_required,status,help_text,is_calculable,show_where,options,operator,position,param';
		$details = new Mapbd_Pos_Custom_Field();
		$details->id( $id );
		if ( $details->select() ) {
			if ( empty( $details->options ) ) {
				$details->options = array();
			}
			$response->display_with_response( true, $details->get_properties_api_response( $propes ) );
		} else {
			$this->add_error( 'No custom field found with these ids' );
			$response->display_with_response( false, null );
		}
	}


	/**
	 * The data is generated by appsbd
	 */
	public function data() {
		$main_response = new Ajax_Data_Response();
		$response      = new Ajax_Response();
		$mainobj       = new Mapbd_Pos_Custom_Field();
		$mainobj->set_search_by_param( $main_response->src_by, 'label' );
		$mainobj->set_sort_by_param( $main_response->sort_by );
		$records         = $mainobj->count_aLL( $main_response->src_item, $main_response->src_text, $main_response->multiparam, 'after' );
		$set_data        = new \stdClass();
		$set_data->types = $mainobj->get_property_raw_options( 'type' );
		if ( $records > 0 ) {
			$main_response->set_grid_records( $records );
			$result = $mainobj->select_all_grid_data(
				'id,label,type,status,show_where,is_required,fld_order',
				'fld_order',
				'ASC',
				$main_response->limit,
				$main_response->limit_start(),
				$main_response->src_item,
				$main_response->src_text,
				$main_response->multiparam,
				'after'
			);
			$main_response->set_grid_data( $result );
		}
		$set_data->data = $main_response->final_response;
		$response->set_response( true, $set_data );
		$response->display();
	}
	/**
	 * The delete item is generated by appsbd
	 */
	public function delete() {
		$param         = AppInput::post_value( 'id' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $param ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
			return;
		}
		$mr = new Mapbd_Pos_Custom_Field();
		$mr->id( $param );
		if ( $mr->select() ) {
			if ( Mapbd_Pos_Custom_Field::delete_by_id( $param ) ) {
				$this->add_info( 'Successfully deleted' );
				$main_response->display_with_response( true );
			} else {
				$this->add_error( 'Delete failed try again' );
				$main_response->display_with_response( false );
			}
		}
	}
	/**
	 * The status change is generated by appsbd
	 */
	public function status_change() {
		$param         = AppInput::post_value( 'id' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $param ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
			return;
		}
		$mr = new Mapbd_Pos_Custom_Field();
		$mr->id( $param );
		if ( $mr->select( 'status' ) ) {
			$status = 'A';
			if ( 'A' == $mr->status ) {
				$status = 'I';
			}
			$uo = new Mapbd_Pos_Custom_Field();
			$uo->status( $status );
			$uo->set_where_update( 'id', $param );
			if ( $uo->Update() ) {
				$this->add_info( 'Status changed successfully' );
				$main_response->display_with_response( true );
			} else {
				$this->add_error( 'Status change failed,please try again' );
				$main_response->display_with_response( false );
			}
		}
	}
	/**
	 * The status change is generated by appsbd
	 */
	public function change_order() {
		$param         = AppInput::post_value( 'id' );
		$type         = AppInput::post_value( 'type' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $param ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
			return;
		}
		$mr = new Mapbd_Pos_Custom_Field();
		$mr->id( $param );
		if ( $mr->select( 'fld_order' ) ) {
			$order = intval( $mr->fld_order );
			$next = new Mapbd_Pos_Custom_Field();
			if ( 'I' == $type ) {
				$next->fld_order( '>' . $order, true );
				$order_type = 'ASC';
			} else {
				$next->fld_order( '<' . $order, true );
				$order_type = 'DESC';
			}

			
			$next_obj = $next->select_all( 'id,fld_order', 'fld_order', $order_type, 1, 0 );
			if ( ! empty( $next_obj[0] ) ) {
				$next_up = new Mapbd_Pos_Custom_Field();
				$next_up->fld_order( $order );
				$next_up->set_where_update( 'id', $next_obj[0]->id );
				if ( $next_up->update() ) {
					$main_obj = new Mapbd_Pos_Custom_Field();
					$main_obj->fld_order( $next_obj[0]->fld_order );
					$main_obj->set_where_update( 'id', $mr->id );
					if ( $main_obj->update() ) {
						$this->add_info( 'Order updated successfully' );
						$main_response->display_with_response( true );
					} else {
						$this->add_error( 'Order update failed' );
						$main_response->display_with_response( false );
					}
				} else {
					$this->add_error( 'Order update failed' );
					$main_response->display_with_response( false );
				}
			} else {
				$this->add_info( 'Order updated successfully' );
				$main_response->display_with_response( true );
			}
		}
	}
	/**
	 * The status change is generated by appsbd
	 */
	public function change_custom_required() {
		$param         = AppInput::post_value( 'id' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $param ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
			return;
		}
		$mr = new Mapbd_Pos_Custom_Field();
		$mr->id( $param );
		if ( $mr->select( 'is_required' ) ) {
			$is_required = 'Y';
			if ( 'Y' == $mr->is_required ) {
				$is_required = 'N';
			}
			$uo = new Mapbd_Pos_Custom_Field();
			$uo->is_required( $is_required );
			$uo->set_where_update( 'id', $param );
			if ( $uo->Update() ) {
				$this->add_info( 'Status changed successfully' );
				$main_response->display_with_response( true );
			} else {
				$this->add_error( 'Status change failed,please try again' );
				$main_response->display_with_response( false );
			}
		}
	}
	/**
	 * The status change is generated by appsbd
	 */
	public function change_visibility() {
		$prop        = AppInput::post_value( 'prop' );
		$change_prop        = AppInput::post_value( 'change_prop' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $prop ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
			return;
		}
		$fields = get_option( '_vt_customer_flds', array() );
		foreach ( $fields as &$field ) {
			if ( $field['prop'] == $prop ) {
				if ( 'Y' == $field[ $change_prop ] ) {
					$field[ $change_prop ] = 'N';
				} else {
					$field[ $change_prop ] = 'Y';
				}
			}
		}
		if ( update_option( '_vt_customer_flds', $fields ) ) {
			$this->add_info( 'Updated successfully' );
			$main_response->display_with_response( true );
		} else {
			$this->add_error( 'Update failed,please try again' );
			$main_response->display_with_response( false );
		}
	}

	/**
	 * The customer fields is generated by appsbd
	 */
	public function customer_fields() {
		 $response = new Ajax_Response();
		$data = get_option( '_vt_customer_flds', array() );
			
		if ( empty( $data ) ) {
			$fields = array(
				array(
					'label' => 'First Name',
					'prop' => 'first_name',
					'is_hidden' => 'N',
					'is_req' => 'Y',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Last Name',
					'prop' => 'last_name',
					'is_hidden' => 'N',
					'is_req' => 'Y',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Username',
					'prop' => 'username',
					'is_hidden' => 'N',
					'is_req' => 'Y',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Email',
					'prop' => 'email',
					'is_hidden' => 'N',
					'is_req' => 'Y',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Mobile',
					'prop' => 'contact_no',
					'is_hidden' => 'N',
					'is_req' => 'Y',
					'is_custom' => 'N',
				),
				array(
					'label' => 'City',
					'prop' => 'city',
					'is_hidden' => 'N',
					'is_req' => 'N',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Street',
					'prop' => 'street',
					'is_hidden' => 'N',
					'is_req' => 'N',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Country',
					'prop' => 'country',
					'is_hidden' => 'N',
					'is_req' => 'N',
					'is_custom' => 'N',
				),
				array(
					'label' => 'Postcode',
					'prop' => 'postcode',
					'is_hidden' => 'N',
					'is_req' => 'N',
					'is_custom' => 'N',
				),
				array(
					'label' => 'State',
					'prop' => 'state',
					'is_hidden' => 'N',
					'is_req' => 'N',
					'is_custom' => 'N',
				),
			);
			add_option( '_vt_customer_flds', $fields );
		}
		$data = get_option( '_vt_customer_flds', array() );
		return $response->display_with_response( true, $data );
	}
}
