<?php
/**
 * Its for EPOS settings module
 *
 * @package VitePos\Modules
 */

namespace VitePos\Modules;

use Appsbd\V1\Core\BaseModule;
use Appsbd\V1\libs\Ajax_Confirm_Response;
use Appsbd\V1\libs\AppInput;
use VitePos\Core\Vitepos_Module;
use VitePos\Libs\Payment_Cash_Method;
use VitePos\Libs\Payment_Custom_Methods;
use VitePos\Libs\Payment_Method_Base;
use VitePos\Libs\Payment_Other_Method;
use VitePos\Libs\Payment_Stripe_Method;
use VitePos\Libs\Payment_Stripe_Terminal_Method;
use VitePos\Libs\Payment_Swipe_Method;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer_Log;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer_Types;

/**
 * Class APBD_EPOS_Settings
 */
class POS_Payment extends Vitepos_Module {
	/**
	 * Its property payment_methods
	 *
	 * @var array
	 */
	private static $payment_methods = null;
	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {
		add_filter( 'vitepos/filter/payment-gw', array( $this, 'check_gateways_settings' ), 5, 2 );
		add_filter( 'vitepos/filter/header-links', array( $this, 'prefetch_script' ), 11 );
		add_filter( 'vitepos/filter/footer-scripts', array( $this, 'footer_script' ), 9 );
		add_filter( 'vitepos/filter/payment/methods', array( $this, 'register_default_payment_methods' ) );
		add_filter( 'vitepos/filter/payment-name', array( $this, 'payment_name_by_id' ), 10, 2 );
		
		add_filter( 'vitepos/filter/payment-method-name', array( $this, 'payment_method_name_filter' ), 10, 2 );
		
		add_action( $this->kernel_object->plugin_base . '/module-loaded', array( $this, 'on_all_module_loaded' ) );
		new Payment_Custom_Methods();
	}

	/**
	 * The get payment methods is generated by appsbd
	 *
	 * @param string $id Its id param.
	 *
	 * @param bool   $is_value_only Its is_value_only param.
	 *
	 * @return \VitePos\Libs\Payment_Method_Base[]|\VitePos\Libs\Payment_Method_Base|null
	 */
	public static function get_payment_methods( $id = '', $is_value_only = false ) {
		if ( is_null( self::$payment_methods ) ) {
			/**
			 * Its for check is there any change before process
			 *
			 * @since 2.1
			 */
			self::$payment_methods = apply_filters( 'vitepos/filter/payment/methods', array() );
		}

		if ( empty( $id ) ) {
			if ( ! is_array( self::$payment_methods ) ) {
				return array();
			}
			if ( $is_value_only ) {
				return array_values( self::$payment_methods );
			}
			return self::$payment_methods;
		} else {
			return ! empty( self::$payment_methods[ $id ] ) ? self::$payment_methods[ $id ] : null;
		}

	}

	/**
	 * The get active methods is generated by appsbd
	 *
	 * @return Payment_Method_Base[]|null
	 */
	public static function get_active_methods() {
		$methods = self::get_payment_methods( '', true );
		return array_values(
			array_filter(
				$methods,
				function( $method ) {
					return $method->is_enable();
				}
			)
		);
	}

	/**
	 * The on all module loaded is generated by appsbd
	 *
	 * @param null $kernel Its kernel param.
	 */
	public function on_all_module_loaded( $kernel = null ) {
		self::get_payment_methods();
	}

	/**
	 * The get payment methods admin settings is generated by appsbd
	 *
	 * @return array
	 */
	public static function get_payment_methods_admin_settings() {
		$methods  = self::get_payment_methods();
		$settings = array();
		foreach ( $methods as $method ) {
			if ( $method instanceof Payment_Method_Base ) {
				if ( $method->is_admin_viewable() ) {
					$settings[ $method->id ] = $method->get_admin_data();
				}
			}
		}

		return $settings;

	}
	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		if ( $this->check_user_access() ) {
			$this->add_ajax_action( 'payment-status', array( $this, 'update_payment_status' ) );
			$this->add_ajax_action( 'payment-settings', array( $this, 'update_payment_settings' ) );
			$this->add_ajax_action( 'update-custom-method', array( $this, 'update_custom_method' ) );
			$this->add_ajax_action( 'remove-custom-method', array( $this, 'remove_custom_method' ) );
		}
		if ( isset( $this->options['vtp_gw'] ) ) {
			unset( $this->options['vtp_gw'] );
			$this->update_option();
		}
	}

	/**
	 * The check user access is generated by appsbd
	 *
	 * @return bool
	 */
	public function check_user_access() {
		return current_user_can( 'activate_plugins' );
	}
	/**
	 * The prefetch script is generated by appsbd
	 *
	 * @param mixed $links Its links param.
	 *
	 * @return mixed
	 */
	public function prefetch_script( $links ) {
		return $links;
	}

	/**
	 * The footer script is generated by appsbd
	 *
	 * @param mixed $scripts Its scripts param.
	 *
	 * @return mixed
	 */
	public function footer_script( $scripts ) {
		return $scripts;
	}

	/**
	 * The get gw new obj is generated by appsbd
	 *
	 * @return \stdClass
	 */
	public static function get_gw_new_obj() {
		$obj            = new \stdClass();
		$obj->is_enable = 'N';
		$obj->can_split = 'Y';
		$obj->settings  = new \stdClass();
		return $obj;
	}

	/**
	 * The is enable gw is generated by appsbd
	 *
	 * @param mixed $gw Its gateway name like stripe.
	 *
	 * @return bool
	 */
	public static function is_enable_gw( $gw ) {
		$gws = self::get_clients_payment_getways();
		return ! empty( $gws[ $gw ]->is_enable ) && 'Y' == $gws[ $gw ]->is_enable;
	}

	/**
	 * The is enable pm is generated by appsbd
	 *
	 * @param mixed $method_id Its method_id param.
	 *
	 * @return bool
	 */
	public static function is_enable_pm( $method_id ) {
		$method = self::get_payment_methods( 'T' );
		if ( ! empty( $method ) ) {
			return $method->is_enable();
		}
		return false;
	}
	/**
	 * The get payment getways is generated by appsbd
	 *
	 * @return array
	 */
	public static function get_payment_getways() {

		return array();
	}

	/**
	 * The get payment gw settings is generated by appsbd
	 *
	 * @param mixed $gw Its gw param.
	 *
	 * @return mixed|null
	 */
	public static function get_payment_gw_settings( $gw ) {
		$gws = self::get_module_option( 'vtp_gw', array() );
		return ! empty( $gws[ $gw ] ) ? $gws[ $gw ] : null;
	}

	/**
	 * The check gateways settings is generated by appsbd
	 *
	 * @param mixed $gw Its gw param.
	 * @param mixed $gw_name Its gw_name param.
	 *
	 * @return mixed
	 */
	public function check_gateways_settings( $gw, $gw_name ) {
		if ( 'stripe' == $gw_name ) {
			if ( ( empty( $gw['settings']->pub_key ) || empty( $gw['settings']->secret_key ) ) ) {
				$gw['settings']->is_enable = 'N';
			}
			if ( isset( $gw['settings']->secret_key ) ) {
				unset( $gw['settings']->secret_key );
			}
		}
		if ( empty( $gw['can_split'] ) ) {
			$gw['can_split'] = 'Y';
		}
		return $gw;
	}

	/**
	 * The payment name by id is generated by appsbd
	 *
	 * @param mixed $title Its title param.
	 * @param mixed $id Its id param.
	 *
	 * @return string
	 */
	public function payment_name_by_id( $title, $id ) {
		if ( '_' == $id ) {
			$title = 'Changed Amount';
		} else {
			$title = 'Unknown';
		}
		return $title;
	}
	/**
	 * The register default payment methods is generated by appsbd
	 *
	 * @param mixed $methods Its methods param.
	 *
	 * @return mixed
	 */
	public function register_default_payment_methods( $methods ) {
		$obj = new Payment_Cash_Method();

		$methods[ $obj->id ] = $obj;

		$obj                 = new Payment_Swipe_Method();
		$methods[ $obj->id ] = $obj;

		$obj                 = new Payment_Other_Method();
		$methods[ $obj->id ] = $obj;

		$obj                 = new Payment_Stripe_Method();
		$methods[ $obj->id ] = $obj;

		$obj                 = new Payment_Stripe_Terminal_Method();
		$methods[ $obj->id ] = $obj;
		return $methods;
	}


	/**
	 * The get clients payment getways is generated by appsbd
	 *
	 * @return mixed
	 */
	public static function get_clients_payment_getways() {

		return array(); 
		$gws = self::get_module_option( 'vtp_gw', array() );
		/**
		 * Its for check is there any change before process
		 *
		 * @since 1.0
		 */
		$res_gws = array();
		foreach ( $gws as $gw_name => $gw ) {
			$gw             = (array) $gw;
			$gw['settings'] = (array) $gw['settings'];   
			$gw['settings'] = (object) $gw['settings']; 
			/**
			 * Its for check is there any change before process
			 *
			 * @since 2.0
			 */
			$res_gws[ $gw_name ] = (object) apply_filters( 'vitepos/filter/payment-gw', $gw, $gw_name );
		}
		return $res_gws;
	}

	/**
	 * The update payment status is generated by appsbd
	 */
	public function update_payment_status() {
		$gw_name   = AppInput::post_value( 'id' );
		$gw_status = AppInput::post_value( 'status', '' );

		$main_response = new Ajax_Confirm_Response();
		/**
		 * Its for to update method status
		 *
		 * @since 2.4
		 */
		do_action( "vitepos/action/payment-method/update-status-{$gw_name}", $gw_status );
		$this->add_error( 'No action initialize' );
		$main_response->display_with_response( false );
	}

	/**
	 * The update payment status bk is generated by appsbd
	 */
	public function update_payment_status_bk() {
		$gw_name       = AppInput::post_value( 'gw' );
		$gw_status     = AppInput::post_value( 'status', '' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $gw_name ) || empty( $gw_status ) ) {
			$this->add_error( 'Invalid param' );
			$main_response->display_with_response( false );
		}
		$gws = self::get_payment_getways();
		if ( isset( $gws[ $gw_name ] ) ) {
			$gws[ $gw_name ]->is_enable = $gw_status;
		} else {
			$gws[ $gw_name ]            = self::get_gw_new_obj();
			$gws[ $gw_name ]->is_enable = $gw_status;
		}
		if ( $this->add_option( 'vtp_gw', $gws ) ) {
			$this->add_info( 'Successfully updated' );
			$main_response->display_with_response( true );
		}
		$this->add_error( 'Update failed' );
		$main_response->display_with_response( false );
	}
	/**
	 * The update payment settings is generated by appsbd.
	 */
	public function update_payment_settings() {
		$gw_name     = AppInput::post_value( 'id' );
		$gw_settings = AppInput::post_value( 'settings', null );
		$all_methods=self::get_payment_methods();
		$main_response = new Ajax_Confirm_Response();
		/**
		 * Its for update payment method admin data.
		 *
		 * @since 2.4
		 */
		do_action( "vitepos/action/payment-method/settings-update-{$gw_name}", $gw_settings );
		$this->add_error( 'No action initialize' );
		$main_response->display_with_response( false );
	}
	public function update_custom_method() {
		$obj = new \stdClass();
		$obj->id     = AppInput::post_value( 'id' ,'');
		$obj->is_active = AppInput::post_value( 'is_active', false );
		$obj->name     = AppInput::post_value( 'name' ,'');
		$obj->icon     = AppInput::post_value( 'icon' ,'vps vps-star');
		$obj->flds = AppInput::post_value( 'flds', [] );
		$custom_methods=Payment_Custom_Methods::get_custom_methods();
		if(empty($custom_methods)){
			$custom_methods[]=$obj;
		}else{
			$is_found=false;
			foreach ( $custom_methods as $ind=>&$custom_method ) {
				if($custom_method->id==$obj->id){
					$is_found=true;
					$custom_method=$obj;
					break;
				}
			}
			if(!$is_found){
				$custom_methods[]=$obj;
			}
		}
		$main_response = new Ajax_Confirm_Response();
		if(Payment_Custom_Methods::update_custom_methods($custom_methods)){
			$this->add_info( 'Successfully updated' );
			$main_response->set_response(true,$custom_methods);
		}else{
			$this->add_error( 'Update failed' );
			$main_response->set_response(false);
		}

		$main_response->display( );
	}
	public function remove_custom_method() {
		$main_response = new Ajax_Confirm_Response();
		$id     = AppInput::post_value( 'id' ,'');
		if(empty($id)){
			$this->add_error( 'Invalid request param' );
			$main_response->display_with_response(false );
		}
		
		$custom_methods=Payment_Custom_Methods::get_custom_methods();
		$m_ind=-1;
		foreach ( $custom_methods as $ind=>&$custom_method ) {
			if($custom_method->id==$id){
				$m_ind=$ind;
				break;
			}
		}
		if($ind>=0){
			
			
			$used=Mapbd_Pos_Cash_Drawer_Types::find_by("payment_type",$id);
			if(empty($used)){
				if(!empty($custom_methods[ $m_ind ])) {
					unset( $custom_methods[ $m_ind ] );
				}
				$custom_methods=array_values($custom_methods);
				if(Payment_Custom_Methods::update_custom_methods($custom_methods)){
					$this->add_info( 'Successfully deleted' );
					$main_response->display_with_response(true,$custom_methods);
				}else{
					$this->add_error( 'delete failed' );
					$main_response->display_with_response(false);
				}
			}else{
				$this->add_error( 'Remove is not possible, cause it has been used in order' );
				$main_response->display_with_response(false );
			}
		}else{
			$this->add_error( 'Does not found any method with the request param' );
			$main_response->display_with_response(false );
		}

		$main_response->display_with_response(false );
	}
	/**
	 * The update payment settings is generated by appsbd.
	 */
	public function update_payment_settings_bk() {
		$gw_name       = AppInput::post_value( 'gw' );
		$gw_settings   = AppInput::post_value( 'settings', null );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $gw_name ) || empty( $gw_settings ) ) {
			$this->add_error( 'Invalid param' );
			$main_response->display_with_response( false );
		}
		$gws = self::get_payment_getways();
		if ( isset( $gws[ $gw_name ] ) ) {
			$gws[ $gw_name ]->settings = (object) $gw_settings;
		} else {
			$gws[ $gw_name ]           = self::get_gw_new_obj();
			$gws[ $gw_name ]->settings = (object) $gw_settings;
		}
		if ( $this->add_option( 'vtp_gw', $gws ) ) {
			$this->add_info( 'Successfully updated' );
			$main_response->display_with_response( true );
		}
		$this->add_error( 'Update failed' );
		$main_response->display_with_response( false );
	}

	/**
	 * The get admin options is generated by appsbd
	 */
	public function get_admin_options() {
		$response      = new Ajax_Confirm_Response();
		$res           = new \stdClass();
		$res->payments = self::get_payment_getways();

		$res->methods = self::get_payment_methods_admin_settings();
		$res->custom_methods=Payment_Custom_Methods::get_custom_methods();
		$response->display_with_response( true, $res );
	}

	public function payment_method_name_filter($name,$id) {
		$methods = self::get_payment_methods();
		foreach ( $methods as $method ) {
			if ( $method instanceof Payment_Method_Base ) {
				if ( $id == $method->id ) {
					$name = $method->title;
					break;
				}
			}
		}
		return $name;
	}



}
